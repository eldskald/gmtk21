[gd_scene load_steps=10 format=2]

[ext_resource path="res://actors/BaseLevel/BaseLevel.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/textures/block-par-0.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/block-par-1.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 camera_position = vec2(0.0);
uniform vec2 par1_vel = vec2(25.0, 2.0);
uniform vec2 par2_vel = vec2(10.0, -5.0);
uniform vec4 bg_color: hint_color;
uniform vec4 bd1_color: hint_color;
uniform vec4 bd2_color: hint_color;
uniform sampler2D parallax_texture_1: hint_black;
uniform sampler2D parallax_texture_2: hint_black;
uniform sampler2D border_noise_texture: hint_black;

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 pix_coord = floor(SCREEN_UV / SCREEN_PIXEL_SIZE);
	float noise = texture(border_noise_texture, SCREEN_UV + TIME * vec2(0.02)).x;
	
	if (length(color - bd1_color) < 0.001) {
		color = noise >= 0.51 ? vec4(0.0) : bd1_color;
	}
	
	if (length(color - bd2_color) < 0.001) {
		color = noise >= 0.49 ? bd1_color : bg_color;
	}
	
	if (length(color - bg_color) < 0.001) {
		color = texture(parallax_texture_1, mod(pix_coord + par1_vel * TIME + camera_position / 2.0, vec2(32.0)) / vec2(32.0));
		if (color.a == 0.0) {
			color = texture(parallax_texture_2, mod(pix_coord + par2_vel * TIME, vec2(32.0)) / vec2(32.0));
		}
		if (color.a == 0.0) {
			color = bg_color;
		}

	}
	
	COLOR = color;
}
"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/camera_position = Vector2( 0, 0 )
shader_param/par1_vel = Vector2( 25, 2 )
shader_param/par2_vel = Vector2( 10, -5 )
shader_param/bg_color = Color( 0.266667, 0.0392157, 0.403922, 1 )
shader_param/bd1_color = Color( 0.839216, 0.878431, 0.941176, 1 )
shader_param/bd2_color = Color( 0.705882, 0.682353, 0.909804, 1 )
shader_param/parallax_texture_1 = ExtResource( 2 )
shader_param/parallax_texture_2 = ExtResource( 3 )
shader_param/border_noise_texture = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec4 color: hint_color;

void fragment() {
	vec2 radial = UV - vec2(0.5);
	vec4 col = vec4(0.0);
	if (length(radial) < 0.3) {
		col = color;
	}
	else {
		vec2 unit = normalize(radial);
		float offset = clamp(length(radial) - 0.3, 0.0, 0.2) * 5.0;
		col = texture(SCREEN_TEXTURE, SCREEN_UV - 0.05 * sin(offset * 3.14 * 2.0 + TIME) * unit * (1.0 - offset));
	}
	COLOR = col;
}


"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/color = Color( 1, 1, 1, 1 )

[node name="BaseLevel" instance=ExtResource( 1 )]

[node name="SolidBlock" parent="." index="0"]
material = SubResource( 4 )
tile_data = PoolIntArray( -983012, 0, 196608, -983011, 0, 196609, -983010, 0, 196609, -983009, 0, 196609, -983008, 0, 196610, -851969, 0, 196608, -917504, 0, 196609, -917503, 0, 196609, -917502, 0, 196609, -917501, 0, 196609, -917500, 0, 196609, -917499, 0, 196609, -917498, 0, 196609, -917497, 0, 196609, -917496, 0, 196609, -917495, 0, 196609, -917494, 0, 196609, -917493, 0, 196609, -917492, 0, 196609, -917491, 0, 196609, -917490, 0, 196609, -917489, 0, 196609, -917488, 0, 196609, -917487, 0, 196609, -917486, 0, 196609, -917485, 0, 196609, -917484, 0, 196609, -917483, 0, 196609, -917482, 0, 196609, -917481, 0, 196609, -917480, 0, 196609, -917479, 0, 196609, -917478, 0, 196609, -917477, 0, 196609, -917476, 0, 720899, -917475, 0, 262145, -917474, 0, 262145, -917473, 0, 262145, -917472, 0, 262146, -786434, 0, 196608, -786433, 0, 720899, -851968, 0, 262145, -851967, 0, 262145, -851966, 0, 262145, -851965, 0, 262145, -851964, 0, 262145, -851963, 0, 262145, -851962, 0, 262145, -851961, 0, 262145, -851960, 0, 262145, -851959, 0, 262145, -851958, 0, 262145, -851957, 0, 262145, -851956, 0, 262145, -851955, 0, 262145, -851954, 0, 262145, -851953, 0, 262145, -851952, 0, 262145, -851951, 0, 262145, -851950, 0, 262145, -851949, 0, 262145, -851948, 0, 262145, -851947, 0, 262145, -851946, 0, 262145, -851945, 0, 262145, -851944, 0, 262145, -851943, 0, 262145, -851942, 0, 262145, -851941, 0, 262145, -851940, 0, 262145, -851939, 0, 262145, -851938, 0, 262145, -851937, 0, 262145, -851936, 0, 720898, -851935, 0, 196610, -720898, 0, 262144, -720897, 0, 262145, -786432, 0, 262145, -786431, 0, 262145, -786430, 0, 262145, -786429, 0, 262145, -786428, 0, 262145, -786427, 0, 262145, -786426, 0, 262145, -786425, 0, 262145, -786424, 0, 262145, -786423, 0, 262145, -786422, 0, 262145, -786421, 0, 262145, -786420, 0, 262145, -786419, 0, 262145, -786418, 0, 262145, -786417, 0, 262145, -786416, 0, 262145, -786415, 0, 262145, -786414, 0, 262145, -786413, 0, 262145, -786412, 0, 262145, -786411, 0, 262145, -786410, 0, 262145, -786409, 0, 262145, -786408, 0, 262145, -786407, 0, 262145, -786406, 0, 262145, -786405, 0, 262145, -786404, 0, 262145, -786403, 0, 262145, -786402, 0, 262145, -786401, 0, 262145, -786400, 0, 262145, -786399, 0, 262146, -655362, 0, 262144, -655361, 0, 262145, -720896, 0, 262145, -720895, 0, 262145, -720894, 0, 262145, -720893, 0, 262145, -720892, 0, 262145, -720891, 0, 262145, -720890, 0, 262145, -720889, 0, 262145, -720888, 0, 262145, -720887, 0, 655362, -720886, 0, 327681, -720885, 0, 327681, -720884, 0, 327681, -720883, 0, 327681, -720882, 0, 327681, -720881, 0, 327681, -720880, 0, 327681, -720879, 0, 327681, -720878, 0, 327681, -720877, 0, 327681, -720876, 0, 327681, -720875, 0, 327681, -720874, 0, 327681, -720873, 0, 327681, -720872, 0, 327681, -720871, 0, 327681, -720870, 0, 327681, -720869, 0, 655363, -720868, 0, 262145, -720867, 0, 262145, -720866, 0, 262145, -720865, 0, 262145, -720864, 0, 262145, -720863, 0, 262146, -589826, 0, 262144, -589825, 0, 262145, -655360, 0, 262145, -655359, 0, 262145, -655358, 0, 262145, -655357, 0, 262145, -655356, 0, 262145, -655355, 0, 262145, -655354, 0, 262145, -655353, 0, 262145, -655352, 0, 262145, -655351, 0, 262146, -655333, 0, 262144, -655332, 0, 262145, -655331, 0, 262145, -655330, 0, 262145, -655329, 0, 262145, -655328, 0, 262145, -655327, 0, 262146, -524290, 0, 262144, -524289, 0, 262145, -589824, 0, 262145, -589823, 0, 262145, -589822, 0, 262145, -589821, 0, 262145, -589820, 0, 262145, -589819, 0, 655362, -589818, 0, 327681, -589817, 0, 327681, -589816, 0, 327681, -589815, 0, 327682, -589797, 0, 262144, -589796, 0, 262145, -589795, 0, 262145, -589794, 0, 262145, -589793, 0, 262145, -589792, 0, 262145, -589791, 0, 262146, -458754, 0, 262144, -458753, 0, 262145, -524288, 0, 262145, -524287, 0, 262145, -524286, 0, 655362, -524285, 0, 327681, -524284, 0, 327681, -524283, 0, 327682, -524261, 0, 327680, -524260, 0, 655363, -524259, 0, 262145, -524258, 0, 262145, -524257, 0, 262145, -524256, 0, 262145, -524255, 0, 262146, -393218, 0, 262144, -393217, 0, 262145, -458752, 0, 262145, -458751, 0, 262145, -458750, 0, 262146, -458724, 0, 262144, -458723, 0, 262145, -458722, 0, 262145, -458721, 0, 262145, -458720, 0, 262145, -458719, 0, 262146, -327682, 0, 262144, -327681, 0, 262145, -393216, 0, 262145, -393215, 0, 262145, -393214, 0, 262146, -393188, 0, 262144, -393187, 0, 262145, -393186, 0, 262145, -393185, 0, 262145, -393184, 0, 262145, -393183, 0, 262146, -262146, 0, 262144, -262145, 0, 262145, -327680, 0, 262145, -327679, 0, 655362, -327678, 0, 327682, -327652, 0, 262144, -327651, 0, 262145, -327650, 0, 262145, -327649, 0, 262145, -327648, 0, 262145, -327647, 0, 262146, -196610, 0, 262144, -196609, 0, 262145, -262144, 0, 262145, -262143, 0, 262146, -262116, 0, 327680, -262115, 0, 655363, -262114, 0, 262145, -262113, 0, 262145, -262112, 0, 262145, -262111, 0, 262146, -131074, 0, 262144, -131073, 0, 262145, -196608, 0, 262145, -196607, 0, 262146, -196579, 0, 262144, -196578, 0, 262145, -196577, 0, 262145, -196576, 0, 262145, -196575, 0, 262146, -65538, 0, 262144, -65537, 0, 262145, -131072, 0, 262145, -131071, 0, 262146, -131043, 0, 262144, -131042, 0, 262145, -131041, 0, 262145, -131040, 0, 262145, -131039, 0, 262146, -2, 0, 262144, -1, 0, 262145, -65536, 0, 262145, -65535, 0, 262146, -65507, 0, 262144, -65506, 0, 262145, -65505, 0, 262145, -65504, 0, 262145, -65503, 0, 262146, 65534, 0, 262144, 65535, 0, 262145, 0, 0, 262145, 1, 0, 262146, 29, 0, 262144, 30, 0, 262145, 31, 0, 262145, 32, 0, 262145, 33, 0, 262146, 131070, 0, 262144, 131071, 0, 262145, 65536, 0, 262145, 65537, 0, 262146, 65565, 0, 262144, 65566, 0, 262145, 65567, 0, 262145, 65568, 0, 262145, 65569, 0, 262146, 196606, 0, 262144, 196607, 0, 262145, 131072, 0, 262145, 131073, 0, 262146, 131101, 0, 262144, 131102, 0, 262145, 131103, 0, 262145, 131104, 0, 262145, 131105, 0, 262146, 262142, 0, 262144, 262143, 0, 262145, 196608, 0, 262145, 196609, 0, 262146, 196637, 0, 262144, 196638, 0, 262145, 196639, 0, 262145, 196640, 0, 262145, 196641, 0, 262146, 327678, 0, 262144, 327679, 0, 262145, 262144, 0, 262145, 262145, 0, 262146, 262173, 0, 262144, 262174, 0, 262145, 262175, 0, 262145, 262176, 0, 262145, 262177, 0, 262146, 393214, 0, 262144, 393215, 0, 262145, 327680, 0, 262145, 327681, 0, 262146, 327709, 0, 262144, 327710, 0, 262145, 327711, 0, 262145, 327712, 0, 262145, 327713, 0, 262146, 458750, 0, 262144, 458751, 0, 262145, 393216, 0, 262145, 393217, 0, 720898, 393218, 0, 196610, 393245, 0, 262144, 393246, 0, 262145, 393247, 0, 262145, 393248, 0, 262145, 393249, 0, 262146, 524286, 0, 262144, 524287, 0, 262145, 458752, 0, 262145, 458753, 0, 262145, 458754, 0, 262146, 458781, 0, 262144, 458782, 0, 262145, 458783, 0, 262145, 458784, 0, 262145, 458785, 0, 262146, 589822, 0, 262144, 589823, 0, 262145, 524288, 0, 262145, 524289, 0, 262145, 524290, 0, 262146, 524317, 0, 262144, 524318, 0, 262145, 524319, 0, 262145, 524320, 0, 262145, 524321, 0, 262146, 655358, 0, 262144, 655359, 0, 262145, 589824, 0, 262145, 589825, 0, 262145, 589826, 0, 262146, 589853, 0, 262144, 589854, 0, 262145, 589855, 0, 262145, 589856, 0, 262145, 589857, 0, 262146, 720894, 0, 262144, 720895, 0, 262145, 655360, 0, 262145, 655361, 0, 262145, 655362, 0, 262146, 655389, 0, 262144, 655390, 0, 262145, 655391, 0, 262145, 655392, 0, 262145, 655393, 0, 262146, 786430, 0, 262144, 786431, 0, 262145, 720896, 0, 262145, 720897, 0, 262145, 720898, 0, 262146, 720924, 0, 196608, 720925, 0, 720899, 720926, 0, 262145, 720927, 0, 262145, 720928, 0, 262145, 720929, 0, 262146, 851966, 0, 262144, 851967, 0, 262145, 786432, 0, 262145, 786433, 0, 262145, 786434, 0, 262146, 786460, 0, 262144, 786461, 0, 262145, 786462, 0, 262145, 786463, 0, 262145, 786464, 0, 262145, 786465, 0, 262146, 917502, 0, 262144, 917503, 0, 262145, 851968, 0, 262145, 851969, 0, 262145, 851970, 0, 262146, 851996, 0, 262144, 851997, 0, 262145, 851998, 0, 262145, 851999, 0, 262145, 852000, 0, 262145, 852001, 0, 262146, 983038, 0, 262144, 983039, 0, 262145, 917504, 0, 262145, 917505, 0, 262145, 917506, 0, 262146, 917532, 0, 262144, 917533, 0, 262145, 917534, 0, 262145, 917535, 0, 262145, 917536, 0, 262145, 917537, 0, 262146, 1048574, 0, 262144, 1048575, 0, 262145, 983040, 0, 262145, 983041, 0, 262145, 983042, 0, 720898, 983043, 0, 196609, 983044, 0, 196609, 983045, 0, 196609, 983046, 0, 196609, 983047, 0, 196609, 983048, 0, 196609, 983049, 0, 196609, 983050, 0, 196609, 983051, 0, 196609, 983052, 0, 196609, 983053, 0, 196609, 983054, 0, 196609, 983055, 0, 196609, 983056, 0, 196609, 983057, 0, 196609, 983058, 0, 196609, 983059, 0, 196609, 983060, 0, 196609, 983061, 0, 196609, 983062, 0, 196609, 983063, 0, 196609, 983064, 0, 196609, 983065, 0, 196609, 983066, 0, 196609, 983067, 0, 196609, 983068, 0, 720899, 983069, 0, 262145, 983070, 0, 262145, 983071, 0, 262145, 983072, 0, 262145, 983073, 0, 262146, 1114110, 0, 262144, 1114111, 0, 262145, 1048576, 0, 262145, 1048577, 0, 262145, 1048578, 0, 262145, 1048579, 0, 262145, 1048580, 0, 262145, 1048581, 0, 262145, 1048582, 0, 262145, 1048583, 0, 262145, 1048584, 0, 262145, 1048585, 0, 262145, 1048586, 0, 262145, 1048587, 0, 262145, 1048588, 0, 262145, 1048589, 0, 262145, 1048590, 0, 262145, 1048591, 0, 262145, 1048592, 0, 262145, 1048593, 0, 262145, 1048594, 0, 262145, 1048595, 0, 262145, 1048596, 0, 262145, 1048597, 0, 262145, 1048598, 0, 262145, 1048599, 0, 262145, 1048600, 0, 262145, 1048601, 0, 262145, 1048602, 0, 262145, 1048603, 0, 262145, 1048604, 0, 262145, 1048605, 0, 262145, 1048606, 0, 262145, 1048607, 0, 262145, 1048608, 0, 262145, 1048609, 0, 262146, 1179646, 0, 262144, 1179647, 0, 262145, 1114112, 0, 262145, 1114113, 0, 262145, 1114114, 0, 262145, 1114115, 0, 262145, 1114116, 0, 262145, 1114117, 0, 262145, 1114118, 0, 262145, 1114119, 0, 262145, 1114120, 0, 262145, 1114121, 0, 262145, 1114122, 0, 262145, 1114123, 0, 262145, 1114124, 0, 262145, 1114125, 0, 262145, 1114126, 0, 262145, 1114127, 0, 262145, 1114128, 0, 262145, 1114129, 0, 262145, 1114130, 0, 262145, 1114131, 0, 262145, 1114132, 0, 262145, 1114133, 0, 262145, 1114134, 0, 262145, 1114135, 0, 262145, 1114136, 0, 262145, 1114137, 0, 262145, 1114138, 0, 262145, 1114139, 0, 262145, 1114140, 0, 262145, 1114141, 0, 262145, 1114142, 0, 262145, 1114143, 0, 262145, 1114144, 0, 262145, 1114145, 0, 262146, 1245182, 0, 327680, 1245183, 0, 327681, 1179648, 0, 327681, 1179649, 0, 327681, 1179650, 0, 327681, 1179651, 0, 327681, 1179652, 0, 327681, 1179653, 0, 327681, 1179654, 0, 327681, 1179655, 0, 327681, 1179656, 0, 327681, 1179657, 0, 327681, 1179658, 0, 327681, 1179659, 0, 327681, 1179660, 0, 327681, 1179661, 0, 327681, 1179662, 0, 327681, 1179663, 0, 327681, 1179664, 0, 327681, 1179665, 0, 327681, 1179666, 0, 327681, 1179667, 0, 327681, 1179668, 0, 327681, 1179669, 0, 327681, 1179670, 0, 327681, 1179671, 0, 327681, 1179672, 0, 327681, 1179673, 0, 327681, 1179674, 0, 327681, 1179675, 0, 327681, 1179676, 0, 327681, 1179677, 0, 327681, 1179678, 0, 327681, 1179679, 0, 327681, 1179680, 0, 327681, 1179681, 0, 327682 )

[node name="BlueWalls" parent="." index="1"]
tile_data = PoolIntArray( 262162, 0, 65536, 327698, 0, 65537, 393234, 0, 65537, 458770, 0, 65537, 524306, 0, 65537, 589842, 0, 65537, 655378, 0, 65538 )

[node name="OrangeWalls" parent="." index="2"]
tile_data = PoolIntArray( 262156, 0, 65536, 327692, 0, 65537, 393228, 0, 65537, 458764, 0, 65537, 524300, 0, 65537, 589836, 0, 65537, 655372, 0, 65538 )

[node name="Chain" parent="." index="5"]
blue_pos = Vector2( 128, 224 )

[node name="Camera2D" parent="." index="6"]
limit_left = 0
limit_top = -192
limit_right = 512
limit_bottom = 288

[node name="FinishLine" parent="." index="8"]
position = Vector2( 248, -16 )

[node name="Hole" parent="FinishLine" index="1"]
material = SubResource( 6 )

[gd_scene load_steps=11 format=2]

[ext_resource path="res://actors/BaseLevel/BaseLevel.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/textures/block-par-0.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/block-par-1.png" type="Texture" id=3]
[ext_resource path="res://actors/death-ray/DeathRayBody.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 camera_position = vec2(0.0);
uniform vec2 par1_vel = vec2(25.0, 2.0);
uniform vec2 par2_vel = vec2(10.0, -5.0);
uniform vec4 bg_color: hint_color;
uniform vec4 bd1_color: hint_color;
uniform vec4 bd2_color: hint_color;
uniform sampler2D parallax_texture_1: hint_black;
uniform sampler2D parallax_texture_2: hint_black;
uniform sampler2D border_noise_texture: hint_black;

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 pix_coord = floor(SCREEN_UV / SCREEN_PIXEL_SIZE);
	float noise = texture(border_noise_texture, SCREEN_UV + TIME * vec2(0.02)).x;
	
	if (length(color - bd1_color) < 0.001) {
		color = noise >= 0.51 ? vec4(0.0) : bd1_color;
	}
	
	if (length(color - bd2_color) < 0.001) {
		color = noise >= 0.49 ? bd1_color : bg_color;
	}
	
	if (length(color - bg_color) < 0.001) {
		color = texture(parallax_texture_1, mod(pix_coord + par1_vel * TIME + camera_position / 2.0, vec2(32.0)) / vec2(32.0));
		if (color.a == 0.0) {
			color = texture(parallax_texture_2, mod(pix_coord + par2_vel * TIME, vec2(32.0)) / vec2(32.0));
		}
		if (color.a == 0.0) {
			color = bg_color;
		}

	}
	
	COLOR = color;
}
"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/camera_position = Vector2( 0, 0 )
shader_param/par1_vel = Vector2( 25, 2 )
shader_param/par2_vel = Vector2( 10, -5 )
shader_param/bg_color = Color( 0.266667, 0.0392157, 0.403922, 1 )
shader_param/bd1_color = Color( 0.839216, 0.878431, 0.941176, 1 )
shader_param/bd2_color = Color( 0.705882, 0.682353, 0.909804, 1 )
shader_param/parallax_texture_1 = ExtResource( 2 )
shader_param/parallax_texture_2 = ExtResource( 3 )
shader_param/border_noise_texture = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec4 color: hint_color;

void fragment() {
	vec2 radial = UV - vec2(0.5);
	vec4 col = vec4(0.0);
	if (length(radial) < 0.3) {
		col = color;
	}
	else {
		vec2 unit = normalize(radial);
		float offset = clamp(length(radial) - 0.3, 0.0, 0.2) * 5.0;
		col = texture(SCREEN_TEXTURE, SCREEN_UV - 0.05 * sin(offset * 3.14 * 2.0) * unit);
	}
	COLOR = col;
}


"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/color = Color( 1, 1, 1, 1 )

[node name="BaseLevel" instance=ExtResource( 1 )]

[node name="SolidBlock" parent="." index="4"]
material = SubResource( 4 )

[node name="DeathRayBody" parent="." index="8" instance=ExtResource( 4 )]
position = Vector2( 202, 79 )

[node name="FinishLine" parent="." index="9"]
position = Vector2( 356, 93.5 )

[node name="Hole" parent="FinishLine" index="1"]
material = SubResource( 6 )

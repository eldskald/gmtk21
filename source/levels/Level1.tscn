[gd_scene load_steps=10 format=2]

[ext_resource path="res://actors/BaseLevel/BaseLevel.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/textures/block-par-0.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/block-par-1.png" type="Texture" id=3]

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform vec2 camera_position = vec2(0.0);
uniform vec2 par1_vel = vec2(25.0, 2.0);
uniform vec2 par2_vel = vec2(10.0, -5.0);
uniform vec4 bg_color: hint_color;
uniform vec4 bd1_color: hint_color;
uniform vec4 bd2_color: hint_color;
uniform sampler2D parallax_texture_1: hint_black;
uniform sampler2D parallax_texture_2: hint_black;
uniform sampler2D border_noise_texture: hint_black;

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 pix_coord = floor(SCREEN_UV / SCREEN_PIXEL_SIZE);
	float noise = texture(border_noise_texture, SCREEN_UV + TIME * vec2(0.02)).x;
	
	if (length(color - bd1_color) < 0.001) {
		color = noise >= 0.51 ? vec4(0.0) : bd1_color;
	}
	
	if (length(color - bd2_color) < 0.001) {
		color = noise >= 0.49 ? bd1_color : bg_color;
	}
	
	if (length(color - bg_color) < 0.001) {
		color = texture(parallax_texture_1, mod(pix_coord + par1_vel * TIME + camera_position / 2.0, vec2(32.0)) / vec2(32.0));
		if (color.a == 0.0) {
			color = texture(parallax_texture_2, mod(pix_coord + par2_vel * TIME, vec2(32.0)) / vec2(32.0));
		}
		if (color.a == 0.0) {
			color = bg_color;
		}

	}
	
	COLOR = color;
}
"

[sub_resource type="OpenSimplexNoise" id=9]

[sub_resource type="NoiseTexture" id=10]
seamless = true
noise = SubResource( 9 )

[sub_resource type="ShaderMaterial" id=11]
resource_local_to_scene = true
shader = SubResource( 8 )
shader_param/camera_position = Vector2( 0, 0 )
shader_param/par1_vel = Vector2( 25, 2 )
shader_param/par2_vel = Vector2( 10, -5 )
shader_param/bg_color = Color( 0.266667, 0.0392157, 0.403922, 1 )
shader_param/bd1_color = Color( 0.839216, 0.878431, 0.941176, 1 )
shader_param/bd2_color = Color( 0.705882, 0.682353, 0.909804, 1 )
shader_param/parallax_texture_1 = ExtResource( 2 )
shader_param/parallax_texture_2 = ExtResource( 3 )
shader_param/border_noise_texture = SubResource( 10 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform vec4 color: hint_color;

void fragment() {
	vec2 radial = UV - vec2(0.5);
	vec4 col = vec4(0.0);
	if (length(radial) < 0.3) {
		col = color;
	}
	else {
		vec2 unit = normalize(radial);
		float offset = clamp(length(radial) - 0.3, 0.0, 0.2) * 5.0;
		col = texture(SCREEN_TEXTURE, SCREEN_UV - 0.05 * sin(offset * 3.14 * 2.0 + TIME) * unit * (1.0 - offset));
	}
	COLOR = col;
}


"

[sub_resource type="ShaderMaterial" id=12]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/color = Color( 1, 1, 1, 1 )

[node name="BaseLevel" instance=ExtResource( 1 )]

[node name="SolidBlock" parent="." index="0"]
material = SubResource( 11 )
tile_data = PoolIntArray( 0, 0, 196608, 1, 0, 196609, 2, 0, 196609, 3, 0, 196609, 4, 0, 196609, 5, 0, 196609, 6, 0, 196609, 7, 0, 196609, 8, 0, 196609, 9, 0, 196609, 10, 0, 196609, 11, 0, 196609, 12, 0, 196609, 13, 0, 196609, 14, 0, 196609, 15, 0, 196609, 16, 0, 196609, 17, 0, 196609, 18, 0, 196609, 19, 0, 196609, 20, 0, 196609, 21, 0, 196609, 22, 0, 196609, 23, 0, 196609, 24, 0, 196609, 25, 0, 196609, 26, 0, 196609, 27, 0, 196609, 28, 0, 196609, 29, 0, 196609, 30, 0, 196609, 31, 0, 196609, 32, 0, 196609, 33, 0, 196609, 34, 0, 196609, 35, 0, 196609, 36, 0, 196610, 65536, 0, 262144, 65537, 0, 655362, 65538, 0, 327681, 65539, 0, 327681, 65540, 0, 327681, 65541, 0, 327681, 65542, 0, 327681, 65543, 0, 327681, 65544, 0, 327681, 65545, 0, 327681, 65546, 0, 327681, 65547, 0, 327681, 65548, 0, 327681, 65549, 0, 327681, 65550, 0, 327681, 65551, 0, 327681, 65552, 0, 327681, 65553, 0, 327681, 65554, 0, 327681, 65555, 0, 327681, 65556, 0, 327681, 65557, 0, 327681, 65558, 0, 327681, 65559, 0, 327681, 65560, 0, 327681, 65561, 0, 327681, 65562, 0, 327681, 65563, 0, 327681, 65564, 0, 327681, 65565, 0, 327681, 65566, 0, 327681, 65567, 0, 327681, 65568, 0, 327681, 65569, 0, 327681, 65570, 0, 327681, 65571, 0, 327681, 65572, 0, 458752, 65573, 0, 131072, 65574, 0, 65538, 131072, 0, 262144, 131073, 0, 262146, 196608, 0, 262144, 196609, 0, 262146, 262144, 0, 262144, 262145, 0, 262146, 327680, 0, 262144, 327681, 0, 262146, 393216, 0, 262144, 393217, 0, 262146, 458752, 0, 262144, 458753, 0, 262146, 524288, 0, 262144, 524289, 0, 262146, 589824, 0, 262144, 589825, 0, 262146, 655360, 0, 262144, 655361, 0, 262146, 720896, 0, 262144, 720897, 0, 262146, 786432, 0, 262144, 786433, 0, 262146, 786460, 0, 196608, 786461, 0, 196609, 786462, 0, 196609, 786463, 0, 196609, 786464, 0, 196609, 786465, 0, 196609, 786466, 0, 196609, 786467, 0, 196609, 786468, 0, 196610, 851968, 0, 262144, 851969, 0, 262146, 851996, 0, 262144, 851997, 0, 262145, 851998, 0, 262145, 851999, 0, 262145, 852000, 0, 262145, 852001, 0, 262145, 852002, 0, 262145, 852003, 0, 262145, 852004, 0, 262146, 917504, 0, 262144, 917505, 0, 262146, 917532, 0, 262144, 917533, 0, 262145, 917534, 0, 262145, 917535, 0, 262145, 917536, 0, 262145, 917537, 0, 262145, 917538, 0, 262145, 917539, 0, 262145, 917540, 0, 262146, 983040, 0, 262144, 983041, 0, 720898, 983042, 0, 196609, 983043, 0, 196609, 983044, 0, 196609, 983045, 0, 196609, 983046, 0, 196609, 983047, 0, 196609, 983048, 0, 196609, 983049, 0, 196609, 983050, 0, 196609, 983051, 0, 196609, 983052, 0, 196609, 983053, 0, 196609, 983054, 0, 196609, 983055, 0, 196609, 983056, 0, 196609, 983057, 0, 196609, 983058, 0, 196609, 983059, 0, 196609, 983060, 0, 196609, 983061, 0, 196609, 983062, 0, 196609, 983063, 0, 196609, 983064, 0, 196609, 983065, 0, 196609, 983066, 0, 196609, 983067, 0, 196609, 983068, 0, 720899, 983069, 0, 262145, 983070, 0, 262145, 983071, 0, 262145, 983072, 0, 262145, 983073, 0, 262145, 983074, 0, 262145, 983075, 0, 262145, 983076, 0, 262146, 1048576, 0, 262144, 1048577, 0, 262145, 1048578, 0, 262145, 1048579, 0, 262145, 1048580, 0, 262145, 1048581, 0, 262145, 1048582, 0, 262145, 1048583, 0, 262145, 1048584, 0, 262145, 1048585, 0, 262145, 1048586, 0, 262145, 1048587, 0, 262145, 1048588, 0, 262145, 1048589, 0, 262145, 1048590, 0, 262145, 1048591, 0, 262145, 1048592, 0, 262145, 1048593, 0, 262145, 1048594, 0, 262145, 1048595, 0, 262145, 1048596, 0, 262145, 1048597, 0, 262145, 1048598, 0, 262145, 1048599, 0, 262145, 1048600, 0, 262145, 1048601, 0, 262145, 1048602, 0, 262145, 1048603, 0, 262145, 1048604, 0, 262145, 1048605, 0, 262145, 1048606, 0, 262145, 1048607, 0, 262145, 1048608, 0, 262145, 1048609, 0, 262145, 1048610, 0, 262145, 1048611, 0, 262145, 1048612, 0, 262146, 1114112, 0, 262144, 1114113, 0, 262145, 1114114, 0, 262145, 1114115, 0, 262145, 1114116, 0, 262145, 1114117, 0, 262145, 1114118, 0, 262145, 1114119, 0, 262145, 1114120, 0, 262145, 1114121, 0, 262145, 1114122, 0, 262145, 1114123, 0, 262145, 1114124, 0, 262145, 1114125, 0, 262145, 1114126, 0, 262145, 1114127, 0, 262145, 1114128, 0, 262145, 1114129, 0, 262145, 1114130, 0, 262145, 1114131, 0, 262145, 1114132, 0, 262145, 1114133, 0, 262145, 1114134, 0, 262145, 1114135, 0, 262145, 1114136, 0, 262145, 1114137, 0, 262145, 1114138, 0, 262145, 1114139, 0, 262145, 1114140, 0, 262145, 1114141, 0, 262145, 1114142, 0, 262145, 1114143, 0, 262145, 1114144, 0, 262145, 1114145, 0, 262145, 1114146, 0, 262145, 1114147, 0, 262145, 1114148, 0, 262146, 1245182, 0, 65536, 1245183, 0, 131072, 1179648, 0, 458753, 1179649, 0, 655363, 1179650, 0, 262145, 1179651, 0, 262145, 1179652, 0, 262145, 1179653, 0, 262145, 1179654, 0, 262145, 1179655, 0, 262145, 1179656, 0, 262145, 1179657, 0, 262145, 1179658, 0, 262145, 1179659, 0, 262145, 1179660, 0, 262145, 1179661, 0, 262145, 1179662, 0, 262145, 1179663, 0, 262145, 1179664, 0, 262145, 1179665, 0, 262145, 1179666, 0, 262145, 1179667, 0, 262145, 1179668, 0, 262145, 1179669, 0, 262145, 1179670, 0, 262145, 1179671, 0, 262145, 1179672, 0, 262145, 1179673, 0, 262145, 1179674, 0, 262145, 1179675, 0, 262145, 1179676, 0, 262145, 1179677, 0, 262145, 1179678, 0, 262145, 1179679, 0, 262145, 1179680, 0, 262145, 1179681, 0, 262145, 1179682, 0, 262145, 1179683, 0, 262145, 1179684, 0, 262146, 1245185, 0, 327680, 1245186, 0, 327681, 1245187, 0, 327681, 1245188, 0, 327681, 1245189, 0, 327681, 1245190, 0, 327681, 1245191, 0, 327681, 1245192, 0, 327681, 1245193, 0, 327681, 1245194, 0, 327681, 1245195, 0, 327681, 1245196, 0, 327681, 1245197, 0, 327681, 1245198, 0, 327681, 1245199, 0, 327681, 1245200, 0, 327681, 1245201, 0, 327681, 1245202, 0, 327681, 1245203, 0, 327681, 1245204, 0, 327681, 1245205, 0, 327681, 1245206, 0, 327681, 1245207, 0, 327681, 1245208, 0, 327681, 1245209, 0, 327681, 1245210, 0, 327681, 1245211, 0, 327681, 1245212, 0, 327681, 1245213, 0, 327681, 1245214, 0, 327681, 1245215, 0, 327681, 1245216, 0, 327681, 1245217, 0, 327681, 1245218, 0, 327681, 1245219, 0, 327681, 1245220, 0, 327682 )

[node name="Chain" parent="." index="5"]
blue_pos = Vector2( 64, 192 )

[node name="Camera2D" parent="." index="6" groups=[
"camera",
]]

[node name="FinishLine" parent="." index="8"]
position = Vector2( 224, 424 )

[node name="Hole" parent="FinishLine" index="1"]
material = SubResource( 12 )

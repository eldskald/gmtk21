[gd_scene load_steps=20 format=2]

[ext_resource path="res://assets/textures/block-par-0.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/block-par-1.png" type="Texture" id=2]
[ext_resource path="res://actors/camera/background.tscn" type="PackedScene" id=3]
[ext_resource path="res://actors/player/chain/Chain.tscn" type="PackedScene" id=4]
[ext_resource path="res://actors/tilemaps/solid-blocks.tscn" type="PackedScene" id=5]
[ext_resource path="res://actors/BaseLevel/Camera2D.gd" type="Script" id=6]
[ext_resource path="res://actors/tilemaps/one-way-platform.tscn" type="PackedScene" id=7]
[ext_resource path="res://actors/tilemaps/blue-walls.tscn" type="PackedScene" id=8]
[ext_resource path="res://actors/tilemaps/orange-walls.tscn" type="PackedScene" id=9]
[ext_resource path="res://actors/hole/hole.tscn" type="PackedScene" id=10]
[ext_resource path="res://actors/BaseLevel/BaseLevel.gd" type="Script" id=11]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 camera_position = vec2(0.0);
uniform vec2 par1_vel = vec2(25.0, 2.0);
uniform vec2 par2_vel = vec2(10.0, -5.0);
uniform vec4 bg_color: hint_color;
uniform vec4 bd1_color: hint_color;
uniform vec4 bd2_color: hint_color;
uniform sampler2D parallax_texture_1: hint_black;
uniform sampler2D parallax_texture_2: hint_black;
uniform sampler2D border_noise_texture: hint_black;

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 pix_coord = floor(SCREEN_UV / SCREEN_PIXEL_SIZE);
	float noise = texture(border_noise_texture, SCREEN_UV + TIME * vec2(0.02)).x;
	
	if (length(color - bd1_color) < 0.001) {
		color = noise >= 0.51 ? vec4(0.0) : bd1_color;
	}
	
	if (length(color - bd2_color) < 0.001) {
		color = noise >= 0.49 ? bd1_color : bg_color;
	}
	
	if (length(color - bg_color) < 0.001) {
		color = texture(parallax_texture_1, mod(pix_coord + par1_vel * TIME + camera_position / 2.0, vec2(32.0)) / vec2(32.0));
		if (color.a == 0.0) {
			color = texture(parallax_texture_2, mod(pix_coord + par2_vel * TIME, vec2(32.0)) / vec2(32.0));
		}
		if (color.a == 0.0) {
			color = bg_color;
		}

	}
	
	COLOR = color;
}
"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/camera_position = Vector2( 0, 0 )
shader_param/par1_vel = Vector2( 25, 2 )
shader_param/par2_vel = Vector2( 10, -5 )
shader_param/bg_color = Color( 0.266667, 0.0392157, 0.403922, 1 )
shader_param/bd1_color = Color( 0.839216, 0.878431, 0.941176, 1 )
shader_param/bd2_color = Color( 0.705882, 0.682353, 0.909804, 1 )
shader_param/parallax_texture_1 = ExtResource( 1 )
shader_param/parallax_texture_2 = ExtResource( 2 )
shader_param/border_noise_texture = SubResource( 3 )

[sub_resource type="Animation" id=5]
resource_name = "shake"
length = 0.6
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.15, 0.25, 0.4, 0.5, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 32, 0 ), Vector2( -32, 0 ), Vector2( 32, 0 ), Vector2( -16, 0 ), Vector2( 16, 0 ), Vector2( 0, 0 ) ]
}

[sub_resource type="CircleShape2D" id=6]
radius = 30.5164

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform vec4 color: hint_color;

void fragment() {
	vec2 radial = UV - vec2(0.5);
	vec4 col = vec4(0.0);
	if (length(radial) < 0.3) {
		col = color;
	}
	else {
		vec2 unit = normalize(radial);
		float offset = clamp(length(radial) - 0.3, 0.0, 0.2) * 5.0;
		col = texture(SCREEN_TEXTURE, SCREEN_UV - 0.05 * sin(offset * 3.14 * 2.0 + TIME) * unit * (1.0 - offset));
	}
	COLOR = col;
}


"

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/color = Color( 1, 1, 1, 1 )

[node name="BaseLevel" type="Node2D" groups=[
"level",
]]
script = ExtResource( 11 )

[node name="SolidBlock" parent="." groups=[
"ground",
] instance=ExtResource( 5 )]
material = SubResource( 4 )
collision_layer = 0
collision_mask = 7
tile_data = PoolIntArray(  )

[node name="BlueWalls" parent="." groups=[
"ground",
] instance=ExtResource( 8 )]
z_index = -1
collision_layer = 0
collision_mask = 2

[node name="OrangeWalls" parent="." groups=[
"ground",
] instance=ExtResource( 9 )]
z_index = -1
collision_layer = 0

[node name="Platform" parent="." groups=[
"ground",
] instance=ExtResource( 7 )]
z_index = -1
collision_layer = 0
collision_mask = 3

[node name="Sprite" parent="." instance=ExtResource( 3 )]
scale = Vector2( 1.05, 1.05 )

[node name="Chain" parent="." instance=ExtResource( 4 )]
chain_size = 10

[node name="Camera2D" type="Camera2D" parent="."]
current = true
smoothing_enabled = true
smoothing_speed = 10.0
script = ExtResource( 6 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera2D"]
anims/shake = SubResource( 5 )

[node name="Orbs" type="Node2D" parent="."]

[node name="FinishLine" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 3
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="FinishLine"]
shape = SubResource( 6 )

[node name="Hole" parent="FinishLine" instance=ExtResource( 10 )]
material = SubResource( 8 )

[connection signal="body_entered" from="FinishLine" to="." method="_on_FinishLine_body_entered"]
